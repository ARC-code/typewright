#!/usr/bin/env ruby

def do_usage()
  puts "Usage: alto_dir [flags] server directory"
  puts "Import all pages in the given directory into specified TypeWright server."
  puts "Pages must be in ALTO format."
  puts "If the book does not exist, issue error."
  puts " -v  Verbose output"
  puts " -t  Test only -- don't actually upload files"
end

# start by reading our input parameters

VALID_OPTION_FLAGS = %w( v t )
VALID_OPTIONS = %w( )

if ARGV.size < 2
  do_usage()
  exit(1)
end

server = ''
directory = ''
option_flags = []
options = {}

ARGV.each do |arg|
  if arg[0..0] == '-'  # if I don't do [0..0] I get an int rather than a string
    if arg =~ /=/
      arg_name = arg[1..99].split("=")[0]
      if VALID_OPTIONS.index(arg_name) == nil
        puts "WARNING: Ignoring unknown parameter: #{arg_name} (#{arg})"
      else
        options[arg_name] = arg[arg_name.size+2..999]
      end
    else
      arg_name = arg[1..99]
      if VALID_OPTION_FLAGS.index(arg_name) == nil
        puts "WARNING: Ignoring unknown parameter: #{arg}"
      else
        option_flags << arg_name
      end
    end
  elsif server.empty?
    server = arg
  elsif directory.empty?
    directory = arg
  else
    puts "WARNING: Ignoring unknown parameter: #{arg}"
  end
end

verbose_output = !option_flags.index('v').nil?
test_only = !option_flags.index('t').nil?
cmd_flags = "#{verbose_output ? '-v':''} #{test_only ? '-t':''}"

original_dir = Dir.pwd
Dir.chdir(directory)
dir_list = []
Dir.glob("*") { |f|
  dir_list << f if File.directory?( f )
}

# find the maximum batch number in the directory
max_batch = 0
dir_list.each { |dir|
  max_batch = dir.to_i if dir.to_i > max_batch
}

Dir.chdir( max_batch.to_s)
page_list = []
Dir.glob("*") { |f|
  page_list << f
}

Dir.chdir(original_dir)

# process each page we have identified
page_list.sort!
page_list.each { |page|

   xml_file = File.join("#{max_batch}", "#{page}")
   cmd = "script/import/alto_xml #{cmd_flags} #{server} #{File.join(directory,xml_file)}"
   puts "" if verbose_output
   puts "" if verbose_output
   puts cmd
   result = `#{cmd}`
   puts result
}

exit 0
