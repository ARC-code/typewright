#!/usr/bin/env ruby

require "#{Dir.pwd}/app/models/xml_reader.rb"

# upload xml file for a new book, given the directory

def do_usage()
  puts "Usage: gamera_dir [flags] server directory"
  puts "Import gamera OCR for book into specified TypeWright server from given directory."
  puts "If book does not already exist, issue error."
  puts " -v  Verbose output"
  puts " -t  Test only -- don't actually upload files"
end


def do_curl_command(cmd, verbose, test_only)
  puts "" if verbose
  puts "curl #{cmd} 2>&1" if verbose
  return '' if test_only
  resp = `curl #{cmd} 2>&1`
  puts resp if verbose
  return resp
end

def parse_upload_response(response)
  result = {}
  doc_id_str = response[/<id>\d+<\/id>/]
  result[:doc_id] = 0
  result[:doc_id] = doc_id_str[4..-6].to_i unless doc_id_str.nil?
  exists_str = response[/<exists>\D+<\/exists>/]
  result[:exists] = (exists_str[8..11] == 'true')
  auth_token_str = response[/<auth_token>\S*<\/auth_token>/]
  result[:auth_token] = auth_token_str[12..-14]
  uri_str = response[/<uri>\S*<\/uri>/]
  result[:uri] = uri_str[5..-7]
  return result
end

# start by reading our input parameters

VALID_OPTION_FLAGS = %w( v t )
VALID_OPTIONS = %w( )

if ARGV.size < 2
  do_usage()
  exit(1)
end

server = ''
directory = ''
option_flags = []
options = {}

ARGV.each do |arg|
  if arg[0..0] == '-'  # if I don't do [0..0] I get an int rather than a string
    if arg =~ /=/
      arg_name = arg[1..99].split("=")[0]
      if VALID_OPTIONS.index(arg_name) == nil
        puts "WARNING: Ignoring unknown parameter: #{arg_name} (#{arg})"
      else
        options[arg_name] = arg[arg_name.size+2..999]
      end
    else
      arg_name = arg[1..99]
      if VALID_OPTION_FLAGS.index(arg_name) == nil
        puts "WARNING: Ignoring unknown parameter: #{arg}"
      else
        option_flags << arg_name
      end
    end
  elsif server.empty?
    server = arg
  elsif directory.empty?
    directory = arg
  else
    puts "WARNING: Ignoring unknown parameter: #{arg}"
  end
end

verbose_output = !option_flags.index('v').nil?
test_only = !option_flags.index('t').nil?


# start by figuring out the ECCO ID
xml_pages_path = directory

Dir.chdir(xml_pages_path)

xml_files = Dir.glob("*.xml")
xml_file = xml_files[0]
if xml_file.nil?
  puts "ERROR: couldn't find any XML files in [#{xml_pages_path}]"
  exit(1)
end
book_id = xml_file[0..9]

# now that we have all the parameters, see if the book already exists and get it's internal id
curl_cmd = "#{server}/documents/upload.xml?uri=lib://ECCO/#{book_id}\&nocreate=1"
raw_response = do_curl_command(curl_cmd, verbose_output, false)
response = parse_upload_response(raw_response)
puts response if verbose_output
doc_id = response[:doc_id]
auth_token = response[:auth_token]
puts "#{doc_id} - lib://ECCO/#{book_id} - #{xml_files.size} pages"
# check to see if it already exists
unless response[:exists]
    puts "ERROR: Document lib://ECCO/#{book_id} does not exist! "
    exit(1)
end

count = 0
xml_files.each { |xml_file|
  count += 1
  auth_token = response[:auth_token]
  curl_cmd = "-F \"xml_file=@#{xml_file};type=text/xml\" -F \"authenticity_token=#{auth_token}\" -X POST #{server}/documents/#{doc_id}/update_page_ocr.xml?page=#{count}&src=gamera"
  raw_response = do_curl_command(curl_cmd, verbose_output, test_only)
  response = parse_upload_response(raw_response) unless test_only
  puts response if verbose_output
  puts "#{xml_file} #{File.new(xml_file).size} (DONE)"
}

exit 0